This project is a React-based web application that implements authentication and book management functionalities. It utilizes React Router for routing, Context API for state management, and Formik along with Yup for form handling and validation. The app is divided into several key components:

Login Page: Authenticates users to access the application.
Home Page: Displays the book list, search functionality, and pagination.
Book Edit Page: Allows users to edit book details.
Protected Routes: Ensures that certain routes are accessible only to authenticated users.

<!-- Setup and Installation -->

Start the development server:
npm start

<!-- Key Functionalities -->

- Authentication
  --- Context API: Used to manage the authentication state across the application.
  --- Login Page: Handles user authentication. Upon successful login, users are redirected to the Home page.
- JWT
  --- Token: To confirm the entry and prevent going to the login page.
- Book Management
  --- Book List: Displays all books with options to edit or delete.
  --- Search Functionality: Allows users to filter books based on title, author, or genre.
  --- Pagination: Splits the book list into pages to improve readability.It is created when the number of data is more than 4.
- Forms
  --- Formik and Yup: Used for handling form inputs and validation, ensuring a smooth user experience.
- Routing
  --- React Router: Manages routing within the application, enabling navigation between different pages without reloading.

<!-- Component Structure -->

--- App.js: The root component that sets up routing and authentication context.
--- context/AuthContext.js: Provides authentication state and functions across the app.
--- Components/Login/Login.js: Handles user login.
--- Components/Home/Home.js: Displays the book list, search bar, and pagination.
--- Components/PageEdit/PageEdit.js: Allows users to edit book details.
--- hooks/useBooks.js: Custom hook for managing book-related operations and state.

<!-- Security Features -->

--- Protected Routes: Ensures that certain parts of the application are accessible only to authenticated users.
--- RedirectIfLoggedIn: Redirects authenticated users from the login page to the home page to prevent redundant logins.

<!-- Book Management Services -->

--- axios : The use of axios is Communication with the endpoints that are placed in the services files

- BookService()

--- Purpose: Fetches all books from the server.
--- Returns: Promise resolving to an array of books or an error message.

- GetOneBook(Id)

--- Purpose: Fetches a single book by its ID.
--- Parameters: Id - The unique identifier of the book.
--- Returns: Promise resolving to the book's data or an error message.

- CreateBook(Data)

--- Purpose: Creates a new book.
--- Parameters: Data - An object containing the book's details.
--- Returns: Promise resolving to the created book's data or an error message.

- deleteBook(Id)

--- Purpose: Deletes a book.
--- Parameters: Id - The unique identifier of the book to delete.
--- Returns: Promise resolving to the deletion response or an error message.

- updateBook(id, updatedData)

--- Purpose: Updates an existing book.
--- Parameters:
--- id - The unique identifier of the book to update.
--- updatedData - An object containing the updated book details.

- Returns: Promise resolving to the updated book's data or an error message.
